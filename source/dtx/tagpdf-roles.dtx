% \iffalse meta-comment
%
%% File: tagpdf-roles.dtx
%
% Copyright (C) 2019-2021 Ulrike Fischer
%
% It may be distributed and/or modified under the conditions of the
% LaTeX Project Public License (LPPL), either version 1.3c of this
% license or (at your option) any later version.  The latest version
% of this license is in the file
%
%    https://www.latex-project.org/lppl.txt
%
% This file is part of the "tagpdf bundle" (The Work in LPPL)
% and all files in that bundle must be distributed together.
%
% -----------------------------------------------------------------------
%
% The development version of the bundle can be found at
%
%    https://github.com/u-fischer/tagpdf
%
% for those people who are interested.
%
% \fi
%
%    \begin{macrocode}
%<@@=tag>
%<*roles>
\ProvidesExplPackage {tagpdf-roles-code} {2021/02/23} {0.80}
 {part of tagpdf - code related to roles and structure names}
%    \end{macrocode}
% \section{Variables}
% Tags have both a name (a string) and a number (for the lua attribute).
% Testing a name is easier with a prop, while accessing with a number is
% better done with a seq. So both are used and must be kept in sync if a new
% tag is added.
% In PDF2.0 we have to take into account that a type can be in more than one
% name space. So the internal name is |type/NS|, e.g. |H1/pdf2|.
% \begin{macro}{\g_@@_role_tags_seq,\g_@@_role_tags_prop}
%    \begin{macrocode}
\@@_seq_new:N  \g_@@_role_tags_seq  %to get names (type/NS) from numbers
\@@_prop_new:N \g_@@_role_tags_prop %to get numbers  from names (type/NS)
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\g_@@_role_tags_NS_prop}
% in pdf 2.0 tags belong to a name space. The tags are stores
% as tag/NS, but we also record in a prop one tag/NS relation so that we can
% find the default NS.
% The keys are the tags, the value shorthands like pdf2, or mathml.
% There is no need to access this from lua, so we use the standard prop commands.
%    \begin{macrocode}
\prop_new:N    \g_@@_role_tags_NS_prop %to namespace info
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\g_@@_role_NS_prop}
% The standard names spaces are the following. The keys are the name
% tagpdf will use,  the urls are the identifier in the namespace object.
% \begin{description}
% \item[mathml] http://www.w3.org/1998/Math/MathML
% \item[pdf2]   http://iso.org/pdf2/ssn
% \item[pdf]    http://iso.org/pdf/ssn (default)
% \item[user]   \cs{c_@@_role_userNS_id_str} (random id, for user tags)
% \end{description}
% More namespaces are possible and
% their objects references and the ones of the namespaces must be collected
% so that an array can be written to the StructTreeRoot at the end (see tagpdf-tree).
% We use a prop to store also the object reference as it will be needed rather
% often.
%    \begin{macrocode}
\prop_new:N \g_@@_role_NS_prop % collect namespaces
%    \end{macrocode}
% \end{macro}
% \section{Namesspaces}
% The following commands setups a names space. Namespace dictionaries can
% contain an optional |/Schema| and |/RoleMapNS| entry. We only reserve the
% objects but delay the writing to the finish code, where we can test if the
% keys and the name spaces are actually needed
% \begin{macro}{\@@_role_NS_new:nn}
% This commands setups objects for the name space and its rolemap. It also
% initialize a prop to collect the rolemaps if needed.
% \begin{function}{\@@_role_NS_new:nnn}
%  \begin{syntax}
%   \cs{@@_role_NS_new:nnn}\Arg{shorthand}\Arg{URI-ID}{Schema}
%  \end{syntax}
% \end{function}
% \begin{macro}{\@@_role_NS_new:nnn}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_role_NS_new:nnn #1 #2 #3
  {
    \pdf_object_new:nn {c_@@_role/Namespace_#1_obj}{dict}
    \pdfdict_new:n     {g_@@_role/Namespace_#1_dict}
    \pdf_object_new:nn {c_@@_role/RoleMapNS_#1_obj}{dict}
    \pdfdict_new:n     {g_@@_role/RoleMapNS_#1_dict}
    \pdfdict_gput:nnn
      {g_@@_role/Namespace_#1_dict}
      {Type}
      {/Namespace}
    \pdf_string_from_unicode:nnN{utf8/string}{#2}\l_tmpa_str
    \pdfdict_gput:nnx
      {g_@@_role/Namespace_#1_dict}
      {NS}
      {\l_tmpa_str}
    %RoleMapNS is added in tree
    \pdfdict_gput:nnx{g_@@_role/Namespace_#1_dict}
      {Schema}{#3}
    \prop_gput:Nnx \g_@@_role_NS_prop {#1}{\pdf_object_ref:n{c_@@_role/Namespace_#1_obj}~}
  }
%    \end{macrocode}
% \end{macro}
% We need an id for the user space. For the tests it should be possible
% to set it to a fix value. So we use random numbers which can
% be fixed by setting a seed. We fake a sort of
% GUID but not try to be really exact as it doesn't matter ...
%
%    \begin{macrocode}
\str_const:Nx \c_@@_role_userNS_id_str
  { data:,
    \int_to_Hex:n{\int_rand:n {65535}}
    \int_to_Hex:n{\int_rand:n {65535}}
    -
    \int_to_Hex:n{\int_rand:n {65535}}
    -
    \int_to_Hex:n{\int_rand:n {65535}}
    -
    \int_to_Hex:n{\int_rand:n {65535}}
    -
    \int_to_Hex:n{\int_rand:n {16777215}}
    \int_to_Hex:n{\int_rand:n {16777215}}
  }
%    \end{macrocode}
% Now we setup the standard names spaces. Currently only if we detect pdf2.0 but
% this will perhaps have to change if the structure code gets to messy.
%    \begin{macrocode}
\pdf_version_compare:NnT > {1.9}
  {
    \@@_role_NS_new:nnn {pdf}   {http://iso.org/pdf/ssn}{}
    \@@_role_NS_new:nnn {pdf2}  {http://iso.org/pdf2/ssn}{}
    \@@_role_NS_new:nnn {mathml}{http://www.w3.org/1998/Math/MathML}{}
    \exp_args:Nnx
    \@@_role_NS_new:nnn {user}{\c_@@_role_userNS_id_str}{}
  }
%    \end{macrocode}
%
% \section{Data}
% In this section we setup the standard data.
% At first the list of structure types. We split them in three lists,
% the tags with which are both in the pdf and pdf2 namespace,
% the one only in pdf and the one with the tags only in pdf2.
% We also define a rolemap for the pdfII only type to pdf so that
% they can always be used.
% \begin{macro}
%   {
%     \c_@@_role_sttags_pdf_pdfII_clist,
%     \c_@@_role_sttags_only_pdf_clist,
%     \c_@@_role_sttags_only_pdfII_clist,
%     \c_@@_role_sttags_pdfII_to_pdf_prop
%   }
%    \begin{macrocode}
%
\clist_const:Nn \c_@@_role_sttags_pdf_pdfII_clist
  {
    Document,   %A complete document. This is the root element of any structure tree containing
                %multiple parts or multiple articles.
    Part,       %A large-scale division of a document.
    Sect,       %A container for grouping related content elements.
    Div,        %A generic block-level element or group of elements
    Caption,    %A brief portion of text describing a table or figure.
    Index,
    NonStruct,  %probably not needed
    H,
    H1,
    H2,
    H3,
    H4,
    H5,
    H6,
    P,
    L,           %list
    LI,          %list item (around label and list item body)
    Lbl,         %list label
    LBody,       %list item body
    Table,
    TR,          %table row
    TH,          %table header cell
    TD,          %table data cell
    THead,       %table header (n rows)
    TBody,       %table rows
    TFoot,       %table footer
    Span,        %generic inline marker
    Link,        %
    Annot,
    Figure,
    Formula,
    Form,
    % ruby warichu etc ..
    Ruby,
    RB,
    RT,
    Warichu,
    WT,
    WP,
    Artifact % only MC-tag ?...
  }

\clist_const:Nn \c_@@_role_sttags_only_pdf_clist
 {
   Art,%A relatively self-contained body of text constituting a single narrative or exposition
   BlockQuote, %A portion of text consisting of one or more paragraphs attributed to someone other
               %than the author of the  surrounding text.
   TOC,        %A list made up of table of contents item entries (structure tag TOCI; see below)
                %and/or other nested table of contents entries
   TOCI,       %An individual member of a table of contents. This entry's children can be any of
               %the following structure  tags:
               %Lbl,Reference,NonStruct,P,TOC
   Index,
   Private,
   Quote,       %inline quote
   Note,        %footnote, endnote. Lbl can be child
   Reference,   %A citation to content elsewhere in the document.
   BibEntry,    %bibentry
   Code
 }

\clist_const:Nn \c_@@_role_sttags_only_pdfII_clist
 {
   DocumentFragment
   ,Aside
   ,H7
   ,H8
   ,H9
   ,H10
   ,Title
   ,FENote
   ,Sub
   ,Em
   ,Strong
   ,Artifact
 }

\prop_const_from_keyval:Nn \c_@@_role_sttags_pdfII_to_pdf_prop
  {
    DocumentFragment = Art,
    Aside = Note,
    Title = H1,
    Sub   = Span,
    H7    = H6 ,
    H8    = H6 ,
    H9    = H6 ,
    H10   = H6,
    FENote= Note,
    Em    = Span,
    Strong= Span,
  }
%    \end{macrocode}
% \end{macro}
% We fill the structure tags in to the seq. We allow all pdf1.7 and pdf2.0,
% and role map if needed the 2.0 tags.
%    \begin{macrocode}
% get tag name from number: \seq_item:Nn \g_@@_role_tags_seq { n }
% get tag number from name: \prop_item:Nn \g_@@_role_tags_prop { name }

\clist_map_inline:Nn \c_@@_role_sttags_pdf_pdfII_clist
  {
    \@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1/pdf2 }
    \@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1/pdf }
    \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ pdf2 }
  }
\clist_map_inline:Nn \c_@@_role_sttags_only_pdf_clist
  {
    \@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1/pdf }
    \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ pdf }
  }
\clist_map_inline:Nn \c_@@_role_sttags_only_pdfII_clist
  {
    \@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1/pdf2 }
    \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ pdf2 }
  }
%    \end{macrocode}
% For luatex we need a name/number relation.
%    \begin{macrocode}

\int_step_inline:nnnn { 1 }{ 1 }{ \seq_count:N \g_@@_role_tags_seq }
  {
    \@@_prop_gput:Nxn \g_@@_role_tags_prop
      {
        \seq_item:Nn \g_@@_role_tags_seq  { #1 }
      }
      { #1 }
  }
%    \end{macrocode}
%
% Starting with pdf 2.0 we have to handle the NS key for name spaces.
% new tags and the rolemap
%    \begin{macrocode}
\pdfdict_new:n {g_@@_role/RoleMap_dict}

%pdf 1.7version, only RoleMap is filled, the names
%space doesn't matter but we need to fill the structures anyway an only user tags exists.
\cs_new_protected:Nn \@@_role_add_tag:nn %(new) name, reference to old
  {
    \prop_if_in:NnF \g_@@_role_tags_prop {#1}
      {
         \msg_info:nnn { tag }{new-tag}{#1}
         \@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1/user }
         \@@_prop_gput:Nnx \g_@@_role_tags_prop    { #1/user }
           {
             \seq_count:N \g_@@_role_tags_seq
           }
         \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ user }
      }
      %\@@_check_add_tag_role:nn {#1}{#2} %%!TODO
    \tl_if_empty:nF { #2 }
      {
        \pdfdict_gput:nnx {g_@@_role/RoleMap_dict}
          {#1}
          {\pdf_name_from_unicode_e:n{#2}}
      }
  }
\cs_generate_variant:Nn \@@_role_add_tag:nn {VV}
%pdf 2.0 version
\cs_new_protected:Nn \@@_role_add_tag:nnnn %tag/namespace/role/namespace
  {
    \prop_if_in:NnF \g_@@_role_tags_prop {#1/#2}
      {
        \msg_info:nnn { tag }{new-tag}{#1}
        \@@_seq_gput_right:Nn \g_@@_role_tags_seq { #1/#2 }
        \@@_prop_gput:Nnx \g_@@_role_tags_prop    { #1/#2 }
          {
            \seq_count:N \g_@@_role_tags_seq
          }
        \prop_gput:Nnn \g_@@_role_tags_NS_prop    { #1 }{ #2 }
      }
    %\@@_check_add_tag_role:nn {#1}{#3} %TODO
    \tl_if_empty:nF { #3 }
      {
        \pdfdict_gput:nnx {g_@@_role/RoleMapNS_#2_dict}{#1}
          {
            [
              \pdf_name_from_unicode_e:n{#3}
              \c_space_tl
              \pdf_object_ref:n {c_@@_role/Namespace_#4_obj}
            ]
          }
      }
  }
\cs_generate_variant:Nn \@@_role_add_tag:nnnn {VVVV}
%this requires that the version is already set. So if it wanders in the kernel
% it must be delayed.
\pdf_version_compare:NnT < {2.0}
  {
     \prop_map_inline:Nn \c_@@_role_sttags_pdfII_to_pdf_prop
       {
         \@@_role_add_tag:nn {#1}{#2}
       }
  }



\tl_new:N \l_@@_role_tag_tmpa_tl
\tl_new:N \l_@@_role_tag_namespace_tmpa_tl
\tl_new:N \l_@@_role_role_tmpa_tl
\tl_new:N \l_@@_role_role_namespace_tmpa_tl

\keys_define:nn { @@ / tag-role }
  {
    ,tag .tl_set:N = \l_@@_role_tag_tmpa_tl
    ,tag-namespace  .tl_set:N = \l_@@_role_tag_namespace_tmpa_tl
    ,role .tl_set:N = \l_@@_role_role_tmpa_tl
    ,role-namespace .tl_set:N = \l_@@_role_role_namespace_tmpa_tl
  }

\keys_define:nn { @@ / setup }
  {
    add-new-tag .code:n =
     {
       \keys_set_known:nnnN
         {@@/tag-role}
         {
           tag-namespace=user,
           role-namespace=, %so that we can test for it.
          #1
         }{@@/tag-role}\l_tmpa_tl
       \tl_if_empty:NF \l_tmpa_tl
         {
           \exp_args:NNno \seq_set_split:Nnn \l_tmpa_seq { / } {\l_tmpa_tl/}
           \tl_set:Nx \l_@@_role_tag_tmpa_tl  { \seq_item:Nn \l_tmpa_seq {1} }
           \tl_set:Nx \l_@@_role_role_tmpa_tl { \seq_item:Nn \l_tmpa_seq {2} }
         }
      \tl_if_empty:NT \l_@@_role_role_namespace_tmpa_tl
         {
           \prop_get:NVNTF
             \g_@@_role_tags_NS_prop
             \l_@@_role_role_tmpa_tl
             \l_@@_role_role_namespace_tmpa_tl
             {
                \prop_if_in:NVF\g_@@_role_NS_prop \l_@@_role_role_namespace_tmpa_tl
                 {
                   \tl_set:Nn \l_@@_role_role_namespace_tmpa_tl {user}
                 }
             }
             {
               \tl_set:Nn \l_@@_role_role_namespace_tmpa_tl {user}
             }
         }
      \pdf_version_compare:NnTF < {2.0}
       {
          \@@_role_add_tag:VV
              \l_@@_role_tag_tmpa_tl
              \l_@@_role_role_tmpa_tl
       }
       {
         \@@_role_add_tag:VVVV
           \l_@@_role_tag_tmpa_tl
           \l_@@_role_tag_namespace_tmpa_tl
           \l_@@_role_role_tmpa_tl
           \l_@@_role_role_namespace_tmpa_tl
       }
    }
  }


%</roles>
%    \end{macrocode}
